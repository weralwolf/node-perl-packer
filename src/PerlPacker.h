/* 
 * File:   PerlPack.h
 * Author: weralwolf
 *
 * Created on March 4, 2011, 6:54 PM
 */

#ifndef __PERLPACK_H__
#define	__PERLPACK_H__

#include<perl++/perl++.h>
#include<string.h>
#include<sstream>
#include<list>

/**
 * Binding of perl pack/upack functions.
 * [Perl pack/unpack tutorial](http://perldoc.perl.org/perlpacktut.html)
 */
class PerlPacker {
private:
    /** Perl interpreter instance  */
    perl::Interpreter interpreter;

    /** List of errors generated by interpreter */
    std::list<std::string> errorsList;

    /** Singleton instance of PerlPacker class */
    static PerlPacker * _instance;

    PerlPacker();
public:
    /**
     * Give access to singleton instance
     * @return PerlPacker instance
     */
    static PerlPacker * Instance();

    /**
     * Converts values to a byte sequence containing representations according to a given specification
     * [Read more](http://perldoc.perl.org/functions/pack.html)
     * @param packing specification
     * @param params what should be converts due specification
     * @return EvalQuery result
     */
    std::string Pack(std::string const &, std::string const &);

    /**
     * Unpacking binary representation of data
     * @param unpacking format. [Read more](http://perldoc.perl.org/functions/unpack.html)
     * @param expressions
     * @return
     */
    std::list<std::string> Unpack(std::string const &, std::string const &);

    /**
     * Provide access to errors generated by perl interpreter
     * @return list of perl interpreter errors
     */
    std::list<std::string> const & GetErrorsList() const;

    /**
     * Convert list of errors into single string
     * @return list of errors in single-string representation
     */
    std::string GetErrorsAsString() const;

    /**
     * Clear list of errors and return all of them in single-string representation
     * @return  list of errors in single-string representation
     */
    std::string FlushErrors();

    /**
     * Clear list of errors
     */
    void ClearErrorList();

    /**
     * @return count of errors in list
     */
    unsigned int CountOfErrors() const;
    ~PerlPacker();

private:
    PerlPacker(PerlPacker const &);
    PerlPacker * operator = (PerlPacker const &);

    /**
     * Evaluate perl command throw interpreter. All errors collect into errorsList
     * @param command name
     * @param command params as single-string
     * @return command evaluation result
     */
    std::string EvalQuery(std::string const &);

    /** Initialize @uDataArray perl list to store unpack result */
    void InitUArray();

    /**
     * Prepare string fo using in perl interpreter scope
     * @param input string
     * @return string with escaped \n and " chars
     */
    std::string PrepareString(std::string const &, char='"') const;
};

#endif	/* __PERLPACK_H__ */

